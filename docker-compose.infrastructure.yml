version: '3.8'

name: microservice-demo-infrastructure

services:
  rabbitmq:
    container_name: microservice-demo-rabbitmq
    image: rabbitmq:3-management
    restart: always
    ports:
        - '5673:5672'
        - '15673:15672'
    networks:
      - microservice-demo-network
    volumes:
      - rabbitmq_data:/rabbitmq/data

  consul:
    container_name: microservice-demo-consul
    image: hashicorp/consul
    restart: always
    ports:
      - 8499:8500
    networks:
      - microservice-demo-network
    volumes:
      - consul_data:/consul/data

  jaeger:
    container_name: microservice-demo-jaeger
    image: jaegertracing/all-in-one:1.52
    command: --query.ui-config=/etc/jaeger/jaeger-ui.json --collector.otlp.enabled=true --prometheus.server-url=http://prometheus:9090 --prometheus.query.support-spanmetrics-connector=true
    restart: always
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    volumes:
      - ./configs/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    ports:
      - "16686:16686"
      - "14269:14269"
    expose:
      - "14269"
    networks:
      - microservice-demo-network

  otel-collector:
    container_name: microservice-demo-otel-collector
    image: otel/opentelemetry-collector-contrib:0.91.0
    restart: always
    command: --config /etc/otelcol/otel-collector-config.yml
    volumes:
      - ./configs/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    ports:
      - "4317:4317"
      - "8889:8889"
    expose:
      - "8889"
    networks:
      - microservice-demo-network
    depends_on:
      - jaeger

  prometheus:
    container_name: microservice-demo-prometheus
    image: prom/prometheus:v2.48.1
    restart: always
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - microservice-demo-network

  grafana:
    container_name: microservice-demo-grafana
    image: grafana/grafana:10.2.3
    restart: always
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./configs/grafana.ini:/etc/grafana/grafana.ini
      - ./configs/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./configs/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./configs/dotnet-otel-dashboard.json:/etc/grafana/provisioning/dashboards/dotnet-otel-dashboard.json
    ports:
      - "2999:3000"
    depends_on:
      - prometheus
    networks:
      - microservice-demo-network

  redis:
    container_name: microservice-demo-redis
    image: redis:alpine
    ports:
      - "6666:6379"
    networks:
      - microservice-demo-network
    restart: always

  postgres:
    container_name: microservice-demo-postgres
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres1234
    volumes:
      - postgres_data:/data/postgres
    ports:
      - "5555:5432"
    networks:
      - microservice-demo-network
    restart: always

networks:
  microservice-demo-network:
    name: microservice-demo-network
    driver: bridge

volumes:
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  jaeger_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local